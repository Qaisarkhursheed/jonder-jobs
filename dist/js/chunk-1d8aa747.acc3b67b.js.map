{"version":3,"sources":["webpack:///../../../src/components/VCombobox/VCombobox.ts","webpack:///../../../src/mixins/rippleable/index.ts","webpack:///../../../src/components/VCheckbox/VCheckbox.ts","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts","webpack:///../../../src/mixins/selectable/index.ts"],"names":["name","props","delimiters","type","default","returnObject","data","editingIndex","computed","computedCounterValue","this","multiple","selectedItems","internalSearch","hasSlot","isAnyValueAllowed","menuCanShow","hasDisplayedItems","$slots","searchIsDirty","methods","onInternalSearchChanged","val","delimiter","find","d","genInput","input","genChipSelection","chip","dblclick","onChipInput","onEnterDown","e","getMenuIndex","onFilteredItemsChanged","onKeyDown","keyCode","$refs","selectionStart","onTabDown","selectItem","getText","item","toLocaleLowerCase","includes","setSelectedItems","internalValue","setValue","value","updateEditing","index","findIndex","Object","updateCombobox","isUsingSlot","Boolean","$scopedSlots","updateSelf","updateTags","menuIndex","itemToSelect","onPaste","pastedItemText","event","findExistingIndex","clearableCallback","directives","ripple","genRipple","center","$createElement","indeterminate","indeterminateIcon","offIcon","onIcon","inputIndeterminate","classes","computedIcon","validationState","isDisabled","hasError","hasColor","watch","isActive","genCheckbox","checkboxAttrs","staticClass","setTextColor","dense","dark","light","toString","genDefaultSlot","defaultMenuProps","offsetY","offsetOverflow","transition","allowOverflow","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","String","lazySearch","selectedIndex","computedItems","selectedValues","map","hideSelected","filteredItems","some","length","currentRange","selectedItem","allItems","text","get","set","isDirty","isSearching","$_menuProps","i","listData","items","isFocused","document","isMenuActive","oldVal","activateMenu","created","destroyed","updateMenuDimensions","menu","changeSelectedIndex","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","attrs","autocomplete","domProps","genInputSlot","slot","genSelections","onClick","isAppendInner","onInput","target","onSpaceDown","onUpDown","setSearch","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","model","prop","id","inputValue","falseValue","trueValue","label","lazyValue","computedColor","isDark","isMultiple","Array","undefined","rippleState","genLabel","click","prevent","disabled","role","checked","on","blur","change","focus","keydown","ref","onBlur","onChange","onFocus","onKeydown"],"mappings":"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","file":"js/chunk-1d8aa747.acc3b67b.js","sourcesContent":["// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    computedCounterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n      // If has menu index, let v-select-list handle\n      if (this.getMenuIndex() > -1) return\n\n      this.$nextTick(this.updateSelf)\n    },\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      if (!this.autoSelectFirst) return\n\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n\n        // if selected item contains search value,\n        // remove the search string\n        if (\n          this.internalSearch &&\n          this.multiple &&\n          this.getText(item).toLocaleLowerCase().includes(this.internalSearch.toLocaleLowerCase())\n        ) {\n          this.internalSearch = null\n        }\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value ?? this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      const index = this.selectedItems.findIndex(item =>\n        this.getText(item) === this.internalSearch)\n\n      // If user enters a duplicate text on chip edit,\n      // don't add it, move it to the end of the list\n      if (index > -1) {\n        const item = typeof value[index] === 'object'\n          ? Object.assign({}, value[index])\n          : value[index]\n\n        value.splice(index, 1)\n        value.push(item)\n      } else {\n        value[this.editingIndex] = this.internalSearch\n      }\n\n      this.setValue(value)\n      this.editingIndex = -1\n      this.internalSearch = null\n    },\n    updateCombobox () {\n      // If search is not dirty, do nothing\n      if (!this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot to avoid a double input\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n      if (isUsingSlot) this.internalSearch = null\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // or if the search is empty\n      // do nothing\n      if ((menuIndex < 0 && !this.searchIsDirty) ||\n          !this.internalSearch) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.findIndex(item =>\n        this.internalSearch === this.getText(item))\n\n      // If the duplicate item is an object,\n      // copy it, so that it can be added again later\n      const itemToSelect = index > -1 && typeof this.selectedItems[index] === 'object'\n        ? Object.assign({}, this.selectedItems[index])\n        : this.internalSearch\n\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(itemToSelect)\n\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData?.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n    clearableCallback () {\n      this.editingIndex = -1\n\n      VAutocomplete.options.methods.clearableCallback.call(this)\n    },\n  },\n})\n","// Directives\nimport ripple from '../../directives/ripple'\n\n// Types\nimport Vue, { VNode, VNodeData, VNodeDirective } from 'vue'\n\nexport default Vue.extend({\n  name: 'rippleable',\n\n  directives: { ripple },\n\n  props: {\n    ripple: {\n      type: [Boolean, Object],\n      default: true,\n    },\n  },\n\n  methods: {\n    genRipple (data: VNodeData = {}): VNode | null {\n      if (!this.ripple) return null\n\n      data.staticClass = 'v-input--selection-controls__ripple'\n\n      data.directives = data.directives || []\n      data.directives.push({\n        name: 'ripple',\n        value: { center: true },\n      } as VNodeDirective)\n\n      return this.$createElement('div', data)\n    },\n  },\n})\n","// Styles\nimport './VCheckbox.sass'\nimport '../../styles/components/_selection-controls.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport VInput from '../VInput'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-checkbox',\n\n  props: {\n    indeterminate: Boolean,\n    indeterminateIcon: {\n      type: String,\n      default: '$checkboxIndeterminate',\n    },\n    offIcon: {\n      type: String,\n      default: '$checkboxOff',\n    },\n    onIcon: {\n      type: String,\n      default: '$checkboxOn',\n    },\n  },\n\n  data () {\n    return {\n      inputIndeterminate: this.indeterminate,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls': true,\n        'v-input--checkbox': true,\n        'v-input--indeterminate': this.inputIndeterminate,\n      }\n    },\n    computedIcon (): string {\n      if (this.inputIndeterminate) {\n        return this.indeterminateIcon\n      } else if (this.isActive) {\n        return this.onIcon\n      } else {\n        return this.offIcon\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.isDisabled && !this.inputIndeterminate) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n  },\n\n  watch: {\n    indeterminate (val) {\n      // https://github.com/vuetifyjs/vuetify/issues/8270\n      this.$nextTick(() => (this.inputIndeterminate = val))\n    },\n    inputIndeterminate (val) {\n      this.$emit('update:indeterminate', val)\n    },\n    isActive () {\n      if (!this.indeterminate) return\n      this.inputIndeterminate = false\n    },\n  },\n\n  methods: {\n    genCheckbox () {\n      const { title, ...checkboxAttrs } = this.attrs$\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.$createElement(VIcon, this.setTextColor(this.validationState, {\n          props: {\n            dense: this.dense,\n            dark: this.dark,\n            light: this.light,\n          },\n        }), this.computedIcon),\n        this.genInput('checkbox', {\n          ...checkboxAttrs,\n          'aria-checked': this.inputIndeterminate\n            ? 'mixed'\n            : this.isActive.toString(),\n        }),\n        this.genRipple(this.setTextColor(this.rippleState)),\n      ])\n    },\n    genDefaultSlot () {\n      return [\n        this.genCheckbox(),\n        this.genLabel(),\n      ]\n    },\n  },\n})\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (\n        !this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (\n        !this.multiple &&\n        !this.valueComparator(\n          this.internalSearch,\n          this.getValue(this.internalValue)\n        )\n      ) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","// Components\nimport VInput from '../../components/VInput'\n\n// Mixins\nimport Rippleable from '../rippleable'\nimport Comparable from '../comparable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\nexport function prevent (e: Event) {\n  e.preventDefault()\n}\n\n/* @vue/component */\nexport default mixins(\n  VInput,\n  Rippleable,\n  Comparable\n).extend({\n  name: 'selectable',\n\n  model: {\n    prop: 'inputValue',\n    event: 'change',\n  },\n\n  props: {\n    id: String,\n    inputValue: null as any,\n    falseValue: null as any,\n    trueValue: null as any,\n    multiple: {\n      type: Boolean,\n      default: null,\n    },\n    label: String,\n  },\n\n  data () {\n    return {\n      hasColor: this.inputValue,\n      lazyValue: this.inputValue,\n    }\n  },\n\n  computed: {\n    computedColor (): string | undefined {\n      if (!this.isActive) return undefined\n      if (this.color) return this.color\n      if (this.isDark && !this.appIsDark) return 'white'\n      return 'primary'\n    },\n    isMultiple (): boolean {\n      return this.multiple === true || (this.multiple === null && Array.isArray(this.internalValue))\n    },\n    isActive (): boolean {\n      const value = this.value\n      const input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) return false\n\n        return input.some(item => this.valueComparator(item, value))\n      }\n\n      if (this.trueValue === undefined || this.falseValue === undefined) {\n        return value\n          ? this.valueComparator(value, input)\n          : Boolean(input)\n      }\n\n      return this.valueComparator(input, this.trueValue)\n    },\n    isDirty (): boolean {\n      return this.isActive\n    },\n    rippleState (): string | undefined {\n      return !this.isDisabled && !this.validationState\n        ? undefined\n        : this.validationState\n    },\n  },\n\n  watch: {\n    inputValue (val) {\n      this.lazyValue = val\n      this.hasColor = val\n    },\n  },\n\n  methods: {\n    genLabel () {\n      const label = VInput.options.methods.genLabel.call(this)\n\n      if (!label) return label\n\n      label!.data!.on = {\n        // Label shouldn't cause the input to focus\n        click: prevent,\n      }\n\n      return label\n    },\n    genInput (type: string, attrs: object) {\n      return this.$createElement('input', {\n        attrs: Object.assign({\n          'aria-checked': this.isActive.toString(),\n          disabled: this.isDisabled,\n          id: this.computedId,\n          role: type,\n          type,\n        }, attrs),\n        domProps: {\n          value: this.value,\n          checked: this.isActive,\n        },\n        on: {\n          blur: this.onBlur,\n          change: this.onChange,\n          focus: this.onFocus,\n          keydown: this.onKeydown,\n          click: prevent,\n        },\n        ref: 'input',\n      })\n    },\n    onBlur () {\n      this.isFocused = false\n    },\n    onClick (e: Event) {\n      this.onChange()\n      this.$emit('click', e)\n    },\n    onChange () {\n      if (!this.isInteractive) return\n\n      const value = this.value\n      let input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) {\n          input = []\n        }\n\n        const length = input.length\n\n        input = input.filter((item: any) => !this.valueComparator(item, value))\n\n        if (input.length === length) {\n          input.push(value)\n        }\n      } else if (this.trueValue !== undefined && this.falseValue !== undefined) {\n        input = this.valueComparator(input, this.trueValue) ? this.falseValue : this.trueValue\n      } else if (value) {\n        input = this.valueComparator(input, value) ? null : value\n      } else {\n        input = !input\n      }\n\n      this.validate(true, input)\n      this.internalValue = input\n      this.hasColor = input\n    },\n    onFocus () {\n      this.isFocused = true\n    },\n    /** @abstract */\n    onKeydown (e: Event) {},\n  },\n})\n"],"sourceRoot":""}